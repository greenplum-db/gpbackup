---
resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

resources:
- name: gpbackup
  type: git
  source:
    uri: https://github.com/greenplum-db/gpbackup
    branch: master

- name: gpbackup_s3_plugin
  type: git
  source:
    branch: master
    uri: https://github.com/greenplum-db/gpbackup-s3-plugin

- name: gpbackup_ddboost_plugin
  type: git
  source:
    branch: master
    private_key: {{gpbackup-ddboost-plugin-remote-key}}
    uri: {{gpbackup-ddboost-plugin-git-remote}}

- name: gpbackup_tagged_src
  type: git
  source:
    branch: master
    uri: https://github.com/greenplum-db/gpbackup
    tag_filter: 1.*

- name: gpbackup_s3_plugin_tagged_src
  type: git
  source:
    branch: master
    uri: https://github.com/greenplum-db/gpbackup-s3-plugin
    tag_filter: 0.*

- name: gpbackup_ddboost_plugin_tagged_src
  type: git
  source:
    branch: master
    private_key: {{gpbackup-ddboost-plugin-remote-key}}
    uri: {{gpbackup-ddboost-plugin-git-remote}}
    tag_filter: 0.*

- name: gpdb_src
  type: git
  source:
    uri: https://github.com/greenplum-db/gpdb
    branch: 5X_STABLE
    tag_filter: 5.*

- name: gpdb_release
  type: git
  source:
    branch: {{gpdb-release-branch}}
    private_key: {{gpdb-release-remote-deploy-key}}
    uri: {{gpdb-release-git-remote}}

- name: bin_gpdb_master
  type: s3
  source:
      bucket: gpdb5-assert-concourse-builds
      versioned_file: bin_gpdb_centos/bin_gpdb.tar.gz
      region_name: us-west-2
      access_key_id: {{bucket-access-key-id}}
      secret_access_key: {{bucket-secret-access-key}}

- name: bin_gpdb_5x_stable
  type: s3
  source:
      bucket: gpdb5-release-builds
      versioned_file: bin_gpdb_centos6/bin_gpdb.tar.gz
      region_name: us-west-2
      access_key_id: {{bucket-access-key-id}}
      secret_access_key: {{bucket-secret-access-key}}

- name: bin_gpdb_43_stable
  type: s3
  source:
      bucket: gpdb-4.3-release
      versioned_file: bin_gpdb_centos5/bin_gpdb.tar.gz
      region_name: us-west-2
      access_key_id: {{gpdb4-bucket-access-key-id}}
      secret_access_key: {{gpdb4-bucket-secret-access-key}}

- name: ccp_src
  type: git
  source:
    branch: {{ccp-git-branch}}
    private_key: {{ccp-git-key}}
    uri: {{ccp-git-remote}}

- name: terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
      GOOGLE_CREDENTIALS: {{google-service-account-key}}
    vars:
      project_id: {{google-project-id}}
    storage:
      access_key_id: {{tf-machine-access-key-id}}
      secret_access_key: {{tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      bucket: gpdb5-pipeline-dynamic-terraform
      bucket_path: clusters-google/

- name: ddboost_terraform
  type: terraform
  source:
    env:
      AWS_ACCESS_KEY_ID: {{gpdb4-tf-machine-access-key-id}}
      AWS_SECRET_ACCESS_KEY: {{gpdb4-tf-machine-secret-access-key}}
    storage:
      access_key_id: {{gpdb4-tf-machine-access-key-id}}
      secret_access_key: {{gpdb4-tf-machine-secret-access-key}}
      region_name: {{aws-region}}
      bucket: pivotal-pa-toolsmiths-pipeline-dynamic-terraform
      bucket_path: clusters-aws/

- name: scale_schema
  type: s3
  source:
    access_key_id: {{gpdb4-bucket-access-key-id}}
    bucket: {{dpm_bucket}}
    region_name: {{aws-region}}
    secret_access_key: {{gpdb4-bucket-secret-access-key}}
    versioned_file: scale-schemas/scale_db1.tgz

- name: boostfs_installer
  type: s3
  source:
    access_key_id: {{gpdb4-bucket-access-key-id}}
    bucket: {{dpm_bucket}}
    region_name: {{aws-region}}
    secret_access_key: {{gpdb4-bucket-secret-access-key}}
    versioned_file: DDBoostFS-1.1.0.1-565598.rhel.x86_64.rpm

- name: slack-alert
  type: slack-notification
  source:
    url: {{dpm_webhook_url}}

- name: component_gpbackup
  type: s3
  source:
    access_key_id: {{bucket-access-key-id}}
    bucket: {{gpdb-stable-bucket-name}}
    region_name: {{aws-region}}
    secret_access_key: {{bucket-secret-access-key}}
    regexp: components/gpbackup/gpbackup-(.*).tar.gz

jobs:
- name: units
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
  - task: unit-tests
    file: gpbackup/ci/tasks/unit-tests.yml
    on_failure:
      *slack_alert

- name: s3_plugin_tests
  plan:
  - aggregate:
    - get: gpbackup_s3_plugin
      trigger: true
    - get: gpbackup
      trigger: true
    - get: ccp_src
    - get: gpdb_src
    - get: bin_gpdb_5x_stable
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable
      gpdb_src: gpdb_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: run_tests
    config:
      platform: linux
      inputs:
       - name: gpbackup
         path: go/src/github.com/greenplum-db/gpbackup
       - name: gpbackup_s3_plugin
         path: go/src/github.com/greenplum-db/gpbackup-s3-plugin
       - name: ccp_src
       - name: cluster_env_files

      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: '1.9.5'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex

          ccp_src/scripts/setup_ssh_to_cluster.sh
          scp -r go/src/github.com/greenplum-db/gpbackup-s3-plugin mdw:/home/gpadmin/go/src/github.com/greenplum-db/gpbackup-s3-plugin

          cat <<SCRIPT > /tmp/run_tests.bash
          set -ex
          source env.sh

          cd \$GOPATH/src/github.com/greenplum-db
          pushd gpbackup-s3-plugin
          make depend
          make unit
          make build
          popd

              cat << CONFIG > \$HOME/s3_config.yaml
              executablepath: \$GPHOME/bin/gpbackup_s3_plugin
              options:
                region: us-west-2
                aws_access_key_id: {{bucket-access-key-id}}
                aws_secret_access_key: {{bucket-secret-access-key}}
                bucket: {{gpbackup-s3-plugin-test-bucket}}
                folder: test/backup
          CONFIG

          pushd gpbackup/plugins
          ./plugin_test_bench.sh \$GOPATH/bin/gpbackup_s3_plugin \$HOME/s3_config.yaml
          SCRIPT

          chmod +x /tmp/run_tests.bash
          scp /tmp/run_tests.bash mdw:/home/gpadmin/run_tests.bash
          ssh -t mdw "bash /home/gpadmin/run_tests.bash"
    on_success:
      <<: *ccp_destroy
    on_failure:
      *slack_alert
  ensure:
    <<: *set_failed

- name: ddboost_plugin_tests
  plan:
  - aggregate:
    - get: gpbackup_ddboost_plugin
      tags: ["ddboost"]
      trigger: true
    - get: gpbackup
      tags: ["ddboost"]
      trigger: true
    - get: ccp_src
      tags: ["ddboost"]
    - get: gpdb_src
      tags: ["ddboost"]
    - get: bin_gpdb_5x_stable
      tags: ["ddboost"]
    - get: boostfs_installer
      tags: ["ddboost"]
  - put: ddboost_terraform
    tags: ["ddboost"]
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/aws-pivotal-pa-toolsmiths/
      vars:
        aws_instance-node-instance_type: t2.medium
        PLATFORM: centos6
  - task: gen_cluster
    params:
      <<: *ddboost_ccp_gen_cluster_default_params
    tags: ["ddboost"]
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      terraform: ddboost_terraform
      gpdb_binary: bin_gpdb_5x_stable
      gpdb_src: gpdb_src
  - task: gpinitsystem
    tags: ["ddboost"]
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    tags: ["ddboost"]
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: install_dependencies
    tags: ["ddboost"]
    config:
      platform: linux
      inputs:
       - name: ccp_src
       - name: cluster_env_files

      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/centos-gpdb-dev
          tag: '7-gcc6.2-llvm3.7'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex

          ccp_src/scripts/setup_ssh_to_cluster.sh

          cat <<SCRIPT > /tmp/install_dependencies.bash
          set -ex

          pushd /tmp
          curl -u{{ivyrepo_user}}:{{ivyrepo_passwd}} -O "https://{{ivyrepo_host}}/gpdb-ext-release-local/third-party/ext/gpdb5_ext-3.3/targzs/rhel6_x86_64-gpdb5_ext-3.3.targz"
          curl -u{{ivyrepo_user}}:{{ivyrepo_passwd}} -O "https://{{ivyrepo_host}}/gpdb-ext-release-local/emc/DDBoostSDK/3.3.0.4-550644/targzs/DDBoostSDK-rhel5_x86_64-3.3.0.4-550644.targz"
          tar -xf rhel6_x86_64-gpdb5_ext-3.3.targz
          tar -xf DDBoostSDK-rhel5_x86_64-3.3.0.4-550644.targz
          sudo cp rhel6_x86_64/include/yaml.h /usr/local/include/yaml.h
          sudo cp rhel5_x86_64/include/* /usr/local/include/.
          sudo cp rhel6_x86_64/lib/libyaml.so /usr/local/lib64/.
          sudo cp rhel5_x86_64/lib/libDDBoost.so /usr/local/lib64/.
          popd
          SCRIPT

          chmod +x /tmp/install_dependencies.bash
          scp /tmp/install_dependencies.bash centos@mdw:/tmp/install_dependencies.bash
          ssh -t centos@mdw "bash /tmp/install_dependencies.bash"
    on_failure:
      do:
      - *slack_alert
      - *ddboost_debug_sleep
  - task: boostfs_installation
    tags: ["ddboost"]
    config:
      platform: linux
      inputs:
       - name: ccp_src
       - name: cluster_env_files
       - name: boostfs_installer
       - name: gpbackup
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: '7'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex
          ccp_src/scripts/setup_ssh_to_cluster.sh
          export DD_IP={{datadomain_source_host}}
          export DD_USER={{datadomain_user}}
          export DD_PASSWORD={{datadomain_password}}
          chmod +x gpbackup/ci/scripts/setup_boostfs.sh
          gpbackup/ci/scripts/setup_boostfs.sh
    on_failure:
      do:
      - *ddboost_debug_sleep
  - task: run_tests
    tags: ["ddboost"]
    config:
      platform: linux
      inputs:
       - name: gpbackup
         path: go/src/github.com/greenplum-db/gpbackup
       - name: gpbackup_ddboost_plugin
       - name: ccp_src
       - name: cluster_env_files

      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/centos-gpdb-dev
          tag: '7-gcc6.2-llvm3.7'
      run:
        path: bash
        args:
        - -c
        - |
          set -ex

          ccp_src/scripts/setup_ssh_to_cluster.sh
          scp -r gpbackup_ddboost_plugin mdw:/home/gpadmin/gpbackup_ddboost_plugin

          cat <<SCRIPT > /tmp/run_tests.bash
          set -ex
          source env.sh

          pushd gpbackup_ddboost_plugin
          make test
          make build
          make install

              cat << CONFIG > \$HOME/ddboost_config_replication.yaml
              executablepath: \$GPHOME/bin/gpbackup_ddboost_plugin
              options:
                hostname: {{datadomain_source_host}}
                username: {{datadomain_user}}
                password: {{datadomain_password}}
                storage_unit: GPDB
                directory: gpbackup_tests
                replication: on
                remote_hostname: {{datadomain_dest_host}}
                remote_username: {{datadomain_user}}
                remote_password: {{datadomain_password}}
                remote_storage_unit: GPDB
                remote_directory: gpbackup_tests
          CONFIG

              cat << CONFIG > \$HOME/ddboost_config_replication_restore.yaml
              executablepath: \$GPHOME/bin/gpbackup_ddboost_plugin
              options:
                hostname: {{datadomain_dest_host}}
                username: {{datadomain_user}}
                password: {{datadomain_password}}
                storage_unit: GPDB
                directory: gpbackup_tests
          CONFIG

          pushd \$GOPATH/src/github.com/greenplum-db/gpbackup/plugins
          ./plugin_test_bench.sh \$GPHOME/bin/gpbackup_ddboost_plugin \$HOME/ddboost_config_replication.yaml \$HOME/ddboost_config_replication_restore.yaml
          SCRIPT

          chmod +x /tmp/run_tests.bash
          scp /tmp/run_tests.bash mdw:/home/gpadmin/run_tests.bash
          ssh -t mdw "bash /home/gpadmin/run_tests.bash"
    on_failure:
      do:
      - *slack_alert
      - *ddboost_debug_sleep
  ensure:
      <<: *ddboost_ccp_destroy

- name: integrations-GPDB5-sles
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_5x_stable
    - get: ccp_src
    - get: gpdb_src
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
        PLATFORM: sles12
        default_image_user: root
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
      PLATFORM: sles12
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable
      gpdb_src: gpdb_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: integration-tests
    file: gpbackup/ci/tasks/sles-tests.yml
    on_success:
      <<: *ccp_destroy
    on_failure:
      *slack_alert
  ensure:
    <<: *set_failed


- name: integrations-master
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_master
    - get: ccp_src
    - get: gpdb_src
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    file: ccp_src/ci/tasks/gen_cluster.yml
    params:
      <<: *ccp_gen_cluster_default_params
    input_mapping:
      gpdb_binary: bin_gpdb_master
      gpdb_src: gpdb_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: integration-tests
    file: gpbackup/ci/tasks/integration-tests.yml
    on_success:
      <<: *ccp_destroy
    on_failure:
      *slack_alert
  ensure:
    <<: *set_failed

- name: integrations-GPDB5
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_5x_stable
    - get: ccp_src
    - get: gpdb_src
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable
      gpdb_src: gpdb_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: integration-tests
    file: gpbackup/ci/tasks/integration-tests.yml
    on_success:
      <<: *ccp_destroy
    on_failure:
      *slack_alert
  ensure:
    <<: *set_failed

- name: integrations-GPDB4.3
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_43_stable
    - get: ccp_src
    - get: gpdb_src
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_43_stable
      gpdb_src: gpdb_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: integration-tests
    file: gpbackup/ci/tasks/integration-tests.yml
    on_success:
      <<: *ccp_destroy
    on_failure:
      *slack_alert
  ensure:
    <<: *set_failed

- name: backup-1.0.0-restore-latest
  plan:
  - aggregate:
    - get: gpbackup
      trigger: true
    - get: bin_gpdb_5x_stable
    - get: ccp_src
    - get: gpdb_src
  - put: terraform
    params:
      <<: *ccp_default_params
      vars:
        <<: *ccp_default_vars
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable
      gpdb_src: gpdb_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: integration-tests
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/centos-gpdb-dev
          tag: '6-gcc6.2-llvm3.7'
      inputs:
      - name: gpbackup
        path: go/src/github.com/greenplum-db/gpbackup
      run:
        path: "sh"
        args:
        - -exc
        - |
          set -ex

          ccp_src/scripts/setup_ssh_to_cluster.sh

          cat <<SCRIPT > /tmp/run_tests.bash
          set -ex
          source env.sh

          cd \$GOPATH/src/github.com/greenplum-db/gpbackup
          export USE_OLD_BACKUP_VERSION=true
          make end_to_end
          SCRIPT

          chmod +x /tmp/run_tests.bash
          scp /tmp/run_tests.bash mdw:/home/gpadmin/run_tests.bash
          ssh -t mdw "bash /home/gpadmin/run_tests.bash"
    on_success:
      <<: *ccp_destroy
    on_failure:
      *slack_alert
  ensure:
    <<: *set_failed

- name: scale-master
  plan:
  - aggregate:
    - get: gpbackup
    - get: bin_gpdb_master
    - get: ccp_src
    - get: gpdb_src
    - get: scale_schema
  - put: terraform
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/google-nvme-block-device/
      vars:
        instance_type: n1-highmem-2
        ccp_reap_minutes: 720
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_master
      gpdb_src: gpdb_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: scale-tests
    file: gpbackup/ci/tasks/scale-tests.yml
    on_success:
      <<: *ccp_destroy_nvme
    on_failure:
      *slack_alert
  ensure:
    <<: *set_failed

- name: scale-5x-stable
  plan:
  - aggregate:
    - get: gpbackup
    - get: bin_gpdb_5x_stable
    - get: ccp_src
    - get: gpdb_src
    - get: scale_schema
  - put: terraform
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/google-nvme-block-device/
      vars:
        instance_type: n1-highmem-2
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_5x_stable
      gpdb_src: gpdb_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: scale-tests
    file: gpbackup/ci/tasks/scale-tests.yml
    on_success:
      <<: *ccp_destroy_nvme
    on_failure:
      *slack_alert
  ensure:
    <<: *set_failed

- name: scale-43-stable
  plan:
  - aggregate:
    - get: gpbackup
    - get: bin_gpdb_43_stable
    - get: ccp_src
    - get: gpdb_src
    - get: scale_schema
  - put: terraform
    params:
      <<: *ccp_default_params
      terraform_source: ccp_src/google-nvme-block-device/
      vars:
        instance_type: n1-highmem-2
  - task: gen_cluster
    params:
      <<: *ccp_gen_cluster_default_params
    file: ccp_src/ci/tasks/gen_cluster.yml
    input_mapping:
      gpdb_binary: bin_gpdb_43_stable
      gpdb_src: gpdb_src
  - task: gpinitsystem
    file: ccp_src/ci/tasks/gpinitsystem.yml
  - task: setup-centos-env
    file: gpbackup/ci/tasks/setup-centos-env.yml
  - task: scale-tests
    file: gpbackup/ci/tasks/scale-tests.yml
    on_success:
      <<: *ccp_destroy_nvme
    on_failure:
      *slack_alert
  ensure:
    <<: *set_failed

- name: package_gpbackup_for_release
  plan:
  - aggregate:
    - get: gpbackup_tagged_src
      trigger: true
    - get: gpbackup_s3_plugin_tagged_src
    - get: gpbackup_ddboost_plugin_tagged_src
    # While the resource is not used, it ensures only releasing if
    # tests are passing
    - get: gpbackup
      passed:
       - units
       - integrations-GPDB5
       - integrations-GPDB4.3
       - integrations-GPDB5-sles
       - backup-1.0.0-restore-latest
       - s3_plugin_tests
       - ddboost_plugin_tests
    - get: gpdb_release
  - task: compile_package_gpbackup
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/centos-gpdb-dev
          tag: '6-gcc6.2-llvm3.7'
      inputs:
      - name: gpbackup_tagged_src
        path: go/src/github.com/greenplum-db/gpbackup
      - name: gpbackup_s3_plugin_tagged_src
        path: go/src/github.com/greenplum-db/gpbackup-s3-plugin
      - name: gpbackup_ddboost_plugin_tagged_src
      outputs:
      - name: component_gpbackup
      - name: gpbackup_version
      run:
        path: "sh"
        args:
        - -exc
        - |
          set -x
          export GOPATH=$(pwd)/go
          export PATH=$PATH:$GOPATH/bin

          # Build gpbackup
          pushd $GOPATH/src/github.com/greenplum-db/gpbackup
          make depend

          make build
          version=`git describe --tags | perl -pe 's/(.*)-([0-9]*)-(g[0-9a-f]*)/\1+dev.\2.\3/'`
          popd
          echo ${version} > gpbackup_version/version

          # Build s3 plugin
          pushd $GOPATH/src/github.com/greenplum-db/gpbackup-s3-plugin
          make depend
          make build
          popd

          # Install dependencies and build ddboost plugin
          pushd gpbackup_ddboost_plugin_tagged_src
          curl -u{{ivyrepo_user}}:{{ivyrepo_passwd}} -O "https://{{ivyrepo_host}}/gpdb-ext-release-local/third-party/ext/gpdb5_ext-3.3/targzs/rhel6_x86_64-gpdb5_ext-3.3.targz"
          curl -u{{ivyrepo_user}}:{{ivyrepo_passwd}} -O "https://{{ivyrepo_host}}/gpdb-ext-release-local/emc/DDBoostSDK/3.3.0.4-550644/targzs/DDBoostSDK-rhel5_x86_64-3.3.0.4-550644.targz"
          tar -xf rhel6_x86_64-gpdb5_ext-3.3.targz
          tar -xf DDBoostSDK-rhel5_x86_64-3.3.0.4-550644.targz
          sudo cp rhel6_x86_64/include/yaml.h /usr/local/include/yaml.h
          sudo cp rhel5_x86_64/include/* /usr/local/include/.
          sudo cp rhel6_x86_64/lib/libyaml*so* /usr/lib64/.
          sudo cp rhel5_x86_64/lib/libDDBoost.so /usr/lib64/.

          make build
          popd

          pushd component_gpbackup
          # Create install script
          printf "#!/bin/sh\nset -x\ntar -xzvf bin_gpbackup.tar.gz -C \$GPHOME" > install_gpdb_component
          chmod +x install_gpdb_component

          # Create test script
          cp ../gpbackup_version/version .
          cp $GOPATH/src/github.com/greenplum-db/gpbackup/ci/scripts/smoke_test_component_gpbackup.sh smoke_test_gpdb_component
          # Assemble binaries
          mkdir -p bin
          cp $GOPATH/bin/gpbackup bin/
          cp $GOPATH/bin/gpbackup_helper bin/
          cp $GOPATH/bin/gprestore bin/
          cp $GOPATH/bin/gpbackup_s3_plugin bin/
          cp ../gpbackup_ddboost_plugin_tagged_src/gpbackup_ddboost_plugin bin/

          # Test package
          export PATH=$PATH:`pwd`/bin
          ./smoke_test_gpdb_component

          tar -czvf bin_gpbackup.tar.gz bin/
          rm -rf bin

          tar -czvf "gpbackup-${version}.tar.gz" bin_gpbackup.tar.gz install_gpdb_component smoke_test_gpdb_component version
          popd
    on_failure:
      *slack_alert
  - task: update-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/centos-gpdb-dev
          tag: '7-gcc6.2-llvm3.7'
      inputs:
      - name: gpdb_release
      - name: gpbackup_version
      outputs:
      - name: gpdb_release_output
      run:
        path: "sh"
        args:
        - -exc
        - |
          set -x
          yum -y install jq
          GPBACKUP_VERSION=$(cat gpbackup_version/version)
          git clone gpdb_release gpdb_release_output
          cd gpdb_release_output
          cat components/component_manifest.json | jq "(.platforms[].components[] | select(.name==\"gpbackup\").version) = \"${GPBACKUP_VERSION}\"" > /tmp/component_manifest.json
          mv /tmp/component_manifest.json components/component_manifest.json
          git add components/component_manifest.json
          git config user.email "gpbackup_bot@example.com"
          git config user.name "GPBACKUP_BOT"
          git commit -m "Updating manifest for gpbackup version ${GPBACKUP_VERSION}"
    on_failure:
      *slack_alert
  - aggregate:
    - put: component_gpbackup
      params:
        file: component_gpbackup/gpbackup-*.tar.gz
    - put: gpdb_release
      params:
        repository: gpdb_release_output
        rebase: true


ccp_default_params_anchor: &ccp_default_params
  action: create
  delete_on_failure: true
  generate_random_name: true
  terraform_source: ccp_src/google/

ccp_vars_anchor: &ccp_default_vars
  instance_type: n1-standard-1
  PLATFORM: centos6

ccp_gen_cluster_default_params_anchor: &ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-google/
  BUCKET_NAME: {{tf-bucket-name}}
  CLOUD_PROVIDER: google

ddboost_ccp_gen_cluster_default_params_anchor: &ddboost_ccp_gen_cluster_default_params
  AWS_ACCESS_KEY_ID: {{gpdb4-tf-machine-access-key-id}}
  AWS_SECRET_ACCESS_KEY: {{gpdb4-tf-machine-secret-access-key}}
  AWS_DEFAULT_REGION: {{aws-region}}
  BUCKET_PATH: clusters-aws/
  BUCKET_NAME: pivotal-pa-toolsmiths-pipeline-dynamic-terraform
  CLOUD_PROVIDER: aws

ccp_destroy_anchor: &ccp_destroy
  put: terraform
  params:
    action: destroy
    env_name_file: terraform/name
    terraform_source: ccp_src/google/
    vars:
      aws_instance-node-instance_type: t2.micro
      aws_ebs_volume_type: standard
      instance_type: n1-standard-1
  get_params:
    action: destroy

ccp_nvme_destroy_anchor: &ccp_destroy_nvme
  put: terraform
  params:
    action: destroy
    env_name_file: terraform/name
    terraform_source: ccp_src/google-nvme-block-device/
    vars:
      aws_instance-node-instance_type: t2.micro
      aws_ebs_volume_type: standard
      instance_type: n1-standard-1
  get_params:
    action: destroy

ddboost_ccp_destroy_anchor: &ddboost_ccp_destroy
  put: ddboost_terraform
  params:
    action: destroy
    env_name_file: ddboost_terraform/name
    terraform_source: ccp_src/aws-pivotal-pa-toolsmiths/
    vars:
      aws_instance-node-instance_type: t2.micro #t2.micro is ignored in destroy, but aws_instance-node-instance_type is required.
  get_params:
    action: destroy

set_failed_anchor: &set_failed
  do:
  - task: on_failure_set_failed
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pivotaldata/ccp
          tag: "7"
      inputs:
        - name: ccp_src
        - name: terraform
      run:
        path: 'ccp_src/google/ccp_failed_test.sh'
      params:
        GOOGLE_CREDENTIALS: {{google-service-account-key}}
        GOOGLE_PROJECT_ID: {{google-project-id}}
        GOOGLE_ZONE: {{google-zone}}
        GOOGLE_SERVICE_ACCOUNT: {{google-service-account}}
        AWS_ACCESS_KEY_ID: {{tf-machine-access-key-id}}
        AWS_SECRET_ACCESS_KEY: {{tf-machine-secret-access-key}}
        AWS_DEFAULT_REGION: {{tf-machine-region}}
        BUCKET_PATH: clusters-google/
        BUCKET_NAME: {{tf-bucket-name}}

ddboost_debug_sleep_anchor: &ddboost_debug_sleep
  task: debug_sleep
  config:
    platform: linux
    image_resource:
      type: docker-image
      source:
        repository: alpine
        tag: latest
    run:
      path: 'sh'
      args: ['-c', 'sleep 2h']
  ensure:
    <<: *ddboost_ccp_destroy

slack_alert_anchor: &slack_alert
  put: slack-alert
  params:
    text: |
      [gpbackup/$BUILD_JOB_NAME] failed:
      https://prod.ci.gpdb.pivotal.io/teams/main/pipelines/gpbackup/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
